<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/service/CarteService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/CarteService.java" />
              <option name="originalContent" value="package service;&#10;&#10;import dao.CarteDao;&#10;import dao.ClientDAO;&#10;import entity.*;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Optional;&#10;import java.util.Random;&#10;&#10;public class CarteService {&#10;&#10;    private CarteDao carteDao;&#10;    private ClientDAO clientDAO;&#10;    private Random random;&#10;&#10;    public CarteService() {&#10;        this.carteDao = new CarteDao();&#10;        this.clientDAO = new ClientDAO();&#10;        this.random = new Random();&#10;    }&#10;&#10;    public boolean creerCarteDebit(int idClient, double plafondJournalier) {&#10;        try {&#10;            Optional&lt;Client&gt; clientOpt = clientDAO.trouverParId(idClient);&#10;            if (clientOpt.isEmpty()) {&#10;                System.err.println(&quot;❌ Client introuvable avec l'ID : &quot; + idClient);&#10;                return false;&#10;            }&#10;&#10;            String numeroCarte = genererNumeroCarte();&#10;            LocalDate dateExpiration = LocalDate.now().plusYears(3);&#10;&#10;            CarteDebit carte = new CarteDebit(numeroCarte, dateExpiration, idClient, plafondJournalier);&#10;&#10;            boolean resultat = carteDao.creer(carte);&#10;&#10;            if (resultat) {&#10;                System.out.println(&quot;✅ Carte débit créée avec succès !&quot;);&#10;                System.out.println(&quot;   Numéro : &quot; + numeroCarte);&#10;                System.out.println(&quot;   Plafond journalier : &quot; + plafondJournalier + &quot; MAD&quot;);&#10;            }&#10;&#10;            return resultat;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erreur lors de la création : &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public boolean creerCarteCredit(int idClient, double plafondMensuel, double tauxInteret) {&#10;        try {&#10;            Optional&lt;Client&gt; clientOpt = clientDAO.trouverParId(idClient);&#10;            if (clientOpt.isEmpty()) {&#10;                System.err.println(&quot;❌ Client introuvable avec l'ID : &quot; + idClient);&#10;                return false;&#10;            }&#10;&#10;            String numeroCarte = genererNumeroCarte();&#10;            LocalDate dateExpiration = LocalDate.now().plusYears(3);&#10;&#10;            CarteCredit carte = new CarteCredit(numeroCarte, dateExpiration, idClient, plafondMensuel, tauxInteret);&#10;&#10;            boolean resultat = carteDao.creer(carte);&#10;&#10;            if (resultat) {&#10;                System.out.println(&quot;✅ Carte crédit créée avec succès !&quot;);&#10;                System.out.println(&quot;   Numéro : &quot; + numeroCarte);&#10;                System.out.println(&quot;   Plafond mensuel : &quot; + plafondMensuel + &quot; MAD&quot;);&#10;                System.out.println(&quot;   Taux d'intérêt : &quot; + tauxInteret + &quot;%&quot;);&#10;            }&#10;&#10;            return resultat;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erreur lors de la création : &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public boolean creerCartePrepayee(int idClient, double soldeInitial) {&#10;        try {&#10;            Optional&lt;Client&gt; clientOpt = clientDAO.trouverParId(idClient);&#10;            if (clientOpt.isEmpty()) {&#10;                System.err.println(&quot;❌ Client introuvable avec l'ID : &quot; + idClient);&#10;                return false;&#10;            }&#10;&#10;            String numeroCarte = genererNumeroCarte();&#10;            LocalDate dateExpiration = LocalDate.now().plusYears(2);&#10;&#10;            CartePrepayee carte = new CartePrepayee(numeroCarte, dateExpiration, idClient, soldeInitial);&#10;&#10;            boolean resultat = carteDao.creer(carte);&#10;&#10;            if (resultat) {&#10;                System.out.println(&quot;✅ Carte prépayée créée avec succès !&quot;);&#10;                System.out.println(&quot;   Numéro : &quot; + numeroCarte);&#10;                System.out.println(&quot;   Solde initial : &quot; + soldeInitial + &quot; MAD&quot;);&#10;            }&#10;&#10;            return resultat;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erreur lors de la création : &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private String genererNumeroCarte() {&#10;        StringBuilder sb = new StringBuilder();&#10;        for (int i = 0; i &lt; 16; i++) {&#10;            sb.append(random.nextInt(10));&#10;        }&#10;        return sb.toString();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package service;&#10;&#10;import dao.CarteDao;&#10;import dao.ClientDAO;&#10;import entity.*;&#10;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.Random;&#10;&#10;public class CarteService {&#10;&#10;    private CarteDao carteDao;&#10;    private ClientDAO clientDAO;&#10;    private Random random;&#10;&#10;    public CarteService() {&#10;        this.carteDao = new CarteDao();&#10;        this.clientDAO = new ClientDAO();&#10;        this.random = new Random();&#10;    }&#10;&#10;    public boolean creerCarteDebit(int idClient, double plafondJournalier) {&#10;        try {&#10;            Optional&lt;Client&gt; clientOpt = clientDAO.trouverParId(idClient);&#10;            if (clientOpt.isEmpty()) {&#10;                System.err.println(&quot;❌ Client introuvable avec l'ID : &quot; + idClient);&#10;                return false;&#10;            }&#10;&#10;            String numeroCarte = genererNumeroCarte();&#10;            LocalDate dateExpiration = LocalDate.now().plusYears(3);&#10;&#10;            CarteDebit carte = new CarteDebit(numeroCarte, dateExpiration, idClient, plafondJournalier);&#10;&#10;            boolean resultat = carteDao.creer(carte);&#10;&#10;            if (resultat) {&#10;                System.out.println(&quot;✅ Carte débit créée avec succès !&quot;);&#10;                System.out.println(&quot;   Numéro : &quot; + numeroCarte);&#10;                System.out.println(&quot;   Plafond journalier : &quot; + plafondJournalier + &quot; MAD&quot;);&#10;            }&#10;&#10;            return resultat;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erreur lors de la création : &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public boolean creerCarteCredit(int idClient, double plafondMensuel, double tauxInteret) {&#10;        try {&#10;            Optional&lt;Client&gt; clientOpt = clientDAO.trouverParId(idClient);&#10;            if (clientOpt.isEmpty()) {&#10;                System.err.println(&quot;❌ Client introuvable avec l'ID : &quot; + idClient);&#10;                return false;&#10;            }&#10;&#10;            String numeroCarte = genererNumeroCarte();&#10;            LocalDate dateExpiration = LocalDate.now().plusYears(3);&#10;&#10;            CarteCredit carte = new CarteCredit(numeroCarte, dateExpiration, idClient, plafondMensuel, tauxInteret);&#10;&#10;            boolean resultat = carteDao.creer(carte);&#10;&#10;            if (resultat) {&#10;                System.out.println(&quot;✅ Carte crédit créée avec succès !&quot;);&#10;                System.out.println(&quot;   Numéro : &quot; + numeroCarte);&#10;                System.out.println(&quot;   Plafond mensuel : &quot; + plafondMensuel + &quot; MAD&quot;);&#10;                System.out.println(&quot;   Taux d'intérêt : &quot; + tauxInteret + &quot;%&quot;);&#10;            }&#10;&#10;            return resultat;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erreur lors de la création : &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public boolean creerCartePrepayee(int idClient, double soldeInitial) {&#10;        try {&#10;            Optional&lt;Client&gt; clientOpt = clientDAO.trouverParId(idClient);&#10;            if (clientOpt.isEmpty()) {&#10;                System.err.println(&quot;❌ Client introuvable avec l'ID : &quot; + idClient);&#10;                return false;&#10;            }&#10;&#10;            String numeroCarte = genererNumeroCarte();&#10;            LocalDate dateExpiration = LocalDate.now().plusYears(2);&#10;&#10;            CartePrepayee carte = new CartePrepayee(numeroCarte, dateExpiration, idClient, soldeInitial);&#10;&#10;            boolean resultat = carteDao.creer(carte);&#10;&#10;            if (resultat) {&#10;                System.out.println(&quot;✅ Carte prépayée créée avec succès !&quot;);&#10;                System.out.println(&quot;   Numéro : &quot; + numeroCarte);&#10;                System.out.println(&quot;   Solde initial : &quot; + soldeInitial + &quot; MAD&quot;);&#10;            }&#10;&#10;            return resultat;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erreur lors de la création : &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public void afficherCartesClient(int idClient) {&#10;        // Vérifier que le client existe&#10;        Optional&lt;Client&gt; clientOpt = clientDAO.trouverParId(idClient);&#10;        if (clientOpt.isEmpty()) {&#10;            System.err.println(&quot;❌ Client introuvable avec l'ID : &quot; + idClient);&#10;            return;&#10;        }&#10;&#10;        Client client = clientOpt.get();&#10;        List&lt;Carte&gt; cartes = carteDao.trouverParClient(idClient);&#10;&#10;        if (cartes.isEmpty()) {&#10;            System.out.println(&quot;\n❌ Aucune carte trouvée pour &quot; + client.nomComplet());&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;\n Cartes de &quot; + client.nomComplet() + &quot; :&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(80));&#10;&#10;        for (Carte carte : cartes) {&#10;            System.out.printf(&quot;ID: %d | Numéro: %s | Type: %s | Statut: %s | Expiration: %s%n&quot;,&#10;                    carte.getIdCarte(),&#10;                    masquerNumeroCarte(carte.getNumeroCarte()),&#10;                    carte.getTypeCarte(),&#10;                    carte.getStatut(),&#10;                    carte.getDateExpiration());&#10;&#10;            if (carte instanceof CarteDebit cd) {&#10;                System.out.printf(&quot;    Plafond journalier: %.2f MAD%n&quot;, cd.getPlafondJournalier());&#10;            } else if (carte instanceof CarteCredit cc) {&#10;                System.out.printf(&quot;    Plafond mensuel: %.2f MAD | Taux: %.2f%%%n&quot;,&#10;                        cc.getPlafondMensuel(), cc.getTauxInteret());&#10;            } else if (carte instanceof CartePrepayee cp) {&#10;                System.out.printf(&quot;    Solde disponible: %.2f MAD%n&quot;, cp.getSoldeDisponible());&#10;            }&#10;            System.out.println(&quot;-&quot;.repeat(80));&#10;        }&#10;    }&#10;&#10;    private String genererNumeroCarte() {&#10;        StringBuilder sb = new StringBuilder();&#10;        for (int i = 0; i &lt; 16; i++) {&#10;            sb.append(random.nextInt(10));&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    private String masquerNumeroCarte(String numero) {&#10;        if (numero.length() != 16) return numero;&#10;        return &quot;**** **** **** &quot; + numero.substring(12);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>